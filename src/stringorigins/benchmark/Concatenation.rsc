module stringorigins::benchmark::Concatenation


import util::Benchmark;
import cobra::arbitrary;
import cobra::util;
import String;
import IO;
import List;


tuple[&T, list[&T]] pick(list[&T] ss) {
  i = 0;
  if (size(ss) > 1) {
    i = arbInt(0, size(ss) - 1);
  }
  x = ss[i];
  if (size(ss) > 1) {
    ss = ss[0..i] + ss[i+1..size(ss)];
  }
  else {
    ss = [];
  }
  return <x, ss>;
}


str arbConcatenatedString(int count, int maxSize) {
  ss = [ arbStringAlphanumeric(arbInt(0,maxSize)) | _ <- [0..count] ];
  
  assert size(ss) == count;

	<x, ss> = pick(ss);
	while (ss != []) { 
	  <y, ss> = pick(ss);
	  if (arbInt(0, 2) == 1) {
	    x = x + y;
	  }
	  else {
	    x = y + x;
	  }
	}
  return x;
}

int benchmarkConcat(int count, int maxSize) {
  ss = [ arbStringAlphanumeric(arbInt(0,maxSize)) | _ <- [0..count] ];
  
  assert size(ss) == count;

  n = realTime(() {  
    <x, ss> = pick(ss);
    while (ss != []) { 
      <y, ss> = pick(ss);
      if (arbInt(0, 2) == 1) {
        x = x + y;
      }
      else {
        x = y + x;
      }
    }
  });
  
  //println("Real time of <count - 1> concats of max-length=<maxSize> strings: <n>");
  return n;
}

void benchmarkConcats() {
  results = [];
  for (i <- [1,100..1000], j <- [1,10..100]) {
    results += [<i, j, benchmarkConcat(i, j)>];
  }
  iprintln(results);
}


/*

With string origins:

[
  <1,1,0>,
  <1,10,0>,
  <1,19,0>,
  <1,28,0>,
  <1,37,1>,
  <1,46,0>,
  <1,55,1>,
  <1,64,0>,
  <1,73,1>,
  <1,82,0>,
  <1,91,1>,
  <100,1,16>,
  <100,10,17>,
  <100,19,18>,
  <100,28,19>,
  <100,37,20>,
  <100,46,21>,
  <100,55,26>,
  <100,64,27>,
  <100,73,27>,
  <100,82,44>,
  <100,91,35>,
  <199,1,34>,
  <199,10,37>,
  <199,19,40>,
  <199,28,43>,
  <199,37,51>,
  <199,46,56>,
  <199,55,62>,
  <199,64,66>,
  <199,73,76>,
  <199,82,92>,
  <199,91,97>,
  <298,1,50>,
  <298,10,56>,
  <298,19,64>,
  <298,28,73>,
  <298,37,89>,
  <298,46,102>,
  <298,55,108>,
  <298,64,128>,
  <298,73,155>,
  <298,82,179>,
  <298,91,206>,
  <397,1,63>,
  <397,10,78>,
  <397,19,90>,
  <397,28,110>,
  <397,37,129>,
  <397,46,146>,
  <397,55,175>,
  <397,64,210>,
  <397,73,261>,
  <397,82,292>,
  <397,91,325>,
  <496,1,79>,
  <496,10,100>,
  <496,19,120>,
  <496,28,147>,
  <496,37,171>,
  <496,46,217>,
  <496,55,266>,
  <496,64,309>,
  <496,73,381>,
  <496,82,464>,
  <496,91,473>,
  <595,1,98>,
  <595,10,131>,
  <595,19,158>,
  <595,28,192>,
  <595,37,246>,
  <595,46,291>,
  <595,55,356>,
  <595,64,412>,
  <595,73,534>,
  <595,82,622>,
  <595,91,750>,
  <694,1,115>,
  <694,10,157>,
  <694,19,196>,
  <694,28,251>,
  <694,37,307>,
  <694,46,389>,
  <694,55,478>,
  <694,64,554>,
  <694,73,691>,
  <694,82,846>,
  <694,91,944>,
  <793,1,136>,
  <793,10,189>,
  <793,19,236>,
  <793,28,310>,
  <793,37,373>,
  <793,46,488>,
  <793,55,611>,
  <793,64,740>,
  <793,73,925>,
  <793,82,1082>,
  <793,91,1253>,
  <892,1,154>,
  <892,10,231>,
  <892,19,297>,
  <892,28,379>,
  <892,37,476>,
  <892,46,595>,
  <892,55,755>,
  <892,64,937>,
  <892,73,1137>,
  <892,82,1333>,
  <892,91,1559>,
  <991,1,171>,
  <991,10,257>,
  <991,19,342>,
  <991,28,452>,
  <991,37,549>,
  <991,46,717>,
  <991,55,878>,
  <991,64,1142>,
  <991,73,1382>,
  <991,82,1558>,
  <991,91,1926>
]

Zonder:

[
  <1,1,4>,
  <1,10,2>,
  <1,19,2>,
  <1,28,2>,
  <1,37,2>,
  <1,46,2>,
  <1,55,2>,
  <1,64,2>,
  <1,73,1>,
  <1,82,1>,
  <1,91,1>,
  <100,1,144>,
  <100,10,108>,
  <100,19,87>,
  <100,28,81>,
  <100,37,65>,
  <100,46,51>,
  <100,55,46>,
  <100,64,45>,
  <100,73,44>,
  <100,82,36>,
  <100,91,31>,
  <199,1,60>,
  <199,10,191>,
  <199,19,53>,
  <199,28,48>,
  <199,37,49>,
  <199,46,48>,
  <199,55,49>,
  <199,64,46>,
  <199,73,45>,
  <199,82,44>,
  <199,91,46>,
  <298,1,67>,
  <298,10,64>,
  <298,19,64>,
  <298,28,63>,
  <298,37,62>,
  <298,46,71>,
  <298,55,61>,
  <298,64,58>,
  <298,73,57>,
  <298,82,56>,
  <298,91,56>,
  <397,1,73>,
  <397,10,73>,
  <397,19,73>,
  <397,28,75>,
  <397,37,75>,
  <397,46,77>,
  <397,55,84>,
  <397,64,73>,
  <397,73,73>,
  <397,82,67>,
  <397,91,65>,
  <496,1,79>,
  <496,10,80>,
  <496,19,79>,
  <496,28,80>,
  <496,37,84>,
  <496,46,82>,
  <496,55,81>,
  <496,64,82>,
  <496,73,82>,
  <496,82,82>,
  <496,91,83>,
  <595,1,97>,
  <595,10,104>,
  <595,19,101>,
  <595,28,97>,
  <595,37,98>,
  <595,46,98>,
  <595,55,99>,
  <595,64,99>,
  <595,73,100>,
  <595,82,104>,
  <595,91,102>,
  <694,1,113>,
  <694,10,115>,
  <694,19,118>,
  <694,28,117>,
  <694,37,117>,
  <694,46,126>,
  <694,55,120>,
  <694,64,122>,
  <694,73,125>,
  <694,82,127>,
  <694,91,124>,
  <793,1,138>,
  <793,10,133>,
  <793,19,136>,
  <793,28,135>,
  <793,37,134>,
  <793,46,137>,
  <793,55,140>,
  <793,64,143>,
  <793,73,146>,
  <793,82,146>,
  <793,91,145>,
  <892,1,155>,
  <892,10,159>,
  <892,19,154>,
  <892,28,154>,
  <892,37,154>,
  <892,46,155>,
  <892,55,155>,
  <892,64,165>,
  <892,73,159>,
  <892,82,159>,
  <892,91,160>,
  <991,1,168>,
  <991,10,169>,
  <991,19,172>,
  <991,28,173>,
  <991,37,174>,
  <991,46,175>,
  <991,55,189>,
  <991,64,179>,
  <991,73,179>,
  <991,82,180>,
  <991,91,185>
]
*/


